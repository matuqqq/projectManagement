// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      =  env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  username      String         @unique
  avatar        String?
  bio           String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  servers       ServerMember[]
  messages      Message[]
  directMessagesSent DirectMessage[] @relation("SentMessages")
  directMessagesReceived DirectMessage[] @relation("ReceivedMessages")
  channels      Channel[]      @relation("ChannelAdmins")
  ownedServers  Server[]       @relation("ServerOwners")
  refreshTokens RefreshToken[]
}

model Server {
  id          String         @id @default(uuid())
  name        String
  description String?
  icon        String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  ownerId     String
  owner       User           @relation(fields: [ownerId], references: [id], name: "ServerOwners")

  channels    Channel[]
  members     ServerMember[]
  roles       ServerRole[]
}

model Channel {
  id          String         @id @default(uuid())
  name        String
  description String?
  serverId    String
  server      Server         @relation(fields: [serverId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isPrivate   Boolean        @default(false)

  messages    Message[]
  admins      User[]         @relation("ChannelAdmins")
}

model Message {
  id          String   @id @default(uuid())
  content     String
  channelId   String
  channel     Channel  @relation(fields: [channelId], references: [id])
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  edited      Boolean  @default(false)
  attachments String?  // Cambiado de String[] a String?
}

model DirectMessage {
  id          String         @id @default(uuid())
  content     String
  senderId    String
  sender      User           @relation(fields: [senderId], references: [id], name: "SentMessages")
  receiverId  String
  receiver    User           @relation(fields: [receiverId], references: [id], name: "ReceivedMessages")
  createdAt   DateTime       @default(now())
  read        Boolean        @default(false)
}

model ServerMember {
  id          String         @id @default(uuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  serverId    String
  server      Server         @relation(fields: [serverId], references: [id])
  joinedAt    DateTime       @default(now())
  roleId      String?
  role        ServerRole?    @relation(fields: [roleId], references: [id])

  @@unique([userId, serverId])
}

model ServerRole {
  id          String                  @id @default(uuid())
  name        String
  serverId    String
  server      Server                  @relation(fields: [serverId], references: [id])
  color       String?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt

  members     ServerMember[]
  ServerRolePermission ServerRolePermission[]
}

model ServerRolePermission {
  id      String      @id @default(uuid())
  role    ServerRole  @relation(fields: [roleId], references: [id])
  roleId  String
  value   String       // Example: MANAGE_CHANNELS
}


model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
